<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>&lt;b&gt;This job is managed by JJB! Changes must be done in&#13;
&lt;a href='https://github.com/SUSE-Cloud/automation/tree/master/jenkins/ci.suse.de/'&gt;git&lt;/a&gt;&#13;
&lt;/b&gt;&#13;
&#13;
This job will redeploy scenario-2c:&#13;
  - 7 nodes&#13;
  - HA with SBD (2 nodes)&#13;
  - DRBD&#13;
  - ceph (3 nodes)&#13;
  - 2 kvm compute nodes&#13;
  - Neutron: linuxbridge or OVS&#13;
&#13;
It will wipe all QA2 machines!&#13;
&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@">
      <gitLabConnection>https://gitlab.suse.de</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty plugin="gitlab-logo@">
      <repositoryName/>
    </org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>hw_number</name>
          <description>Mandatory, name of the QA cloud server as integer</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>admin_os</name>
          <description>Mandatory, admin node operating system version</description>
          <defaultValue>sles12sp2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sbd_ip</name>
          <description>Mandatory, IP of iscsi target for sbd</description>
          <defaultValue>10.162.64.10</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo_owner</name>
          <description>Mandatory, automation repo owner/organization</description>
          <defaultValue>SUSE-Cloud</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>automation_repo</name>
          <description>Mandatory, automation repo URL</description>
          <defaultValue>git://github.com/$repo_owner/automation.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>Mandatory, automation repo branch</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>netapp_server</name>
          <description>Mandatory, the name of the NetApp Storage backend server</description>
          <defaultValue>netapp-n1-e0m.cloud.suse.de</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>netapp_vserver</name>
          <description>Mandatory, the name of the NetApp Storage backend vserver</description>
          <defaultValue>cloud-manila-svm</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tempest</name>
          <description>Optional, specify what tempest test(s) to run, e.g. smoke, smoke|full or smoke|defcore</description>
          <defaultValue>smoke</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cct</name>
          <description>Optional, specify cct tests to run</description>
          <defaultValue>features:base</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ssl_type</name>
          <description>Mandatory, set the SSL configuration for the cloud, available options: no-ssl, ssl-insecure, ssl</description>
          <defaultValue>no-ssl</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cloud_version</name>
          <description>Mandatory, version of the cloud to be installed as integer</description>
          <defaultValue>7</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_file</name>
          <description>Scenario YAML file name</description>
          <defaultValue>qa-scenario-2c.yaml</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cloudsource</name>
          <description/>
          <defaultValue>develcloud$cloud_version</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TESTHEAD</name>
          <description>if non-empty, test latest version from Devel:Cloud:Staging</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_ceph</name>
          <description>Install ceph barclamp</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hacloud</name>
          <description>By default we do not want HA configured and installed</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>clusterconfig</name>
          <description>HA configuration for clusters. Make sense only if hacloud=1</description>
          <defaultValue>services=2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>networkingplugin</name>
          <description>networking plugin to be used by Neutron. Available options are: openvswitch:gre, vlan, vxlan / linuxbridge:vlan
</description>
          <defaultValue>linuxbridge</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>networkingmode</name>
          <description>networking mode to be used by Neutron. Available options are gre, vlan, vxlan</description>
          <defaultValue>vlan</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nodenumber</name>
          <description>Number of nodes to use; is scenario specific</description>
          <defaultValue>7</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>commands</name>
          <description>All the steps that needs to be completed to have cloud installed</description>
          <defaultValue>addupdaterepo prepareinstallcrowbar runupdate bootstrapcrowbar installcrowbar allocate waitcloud setup_aliases</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>UPDATEREPOS</name>
          <description>Update repositories (one URL per line)</description>
          <defaultValue/>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UPDATEBEFOREINSTALL</name>
          <description>add update repositories before crowbar install</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>cloud-mkphyscloud-gate-qa</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
admin=crowbar$hw_number
cloud=qa$hw_number
netapp_server=$netapp_server
netapp_password=`cat /home/jenkins/passwords/netapp_password`

if [ ! -z "$UPDATEREPOS" ] ; then
  export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
fi

export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

# check that netapp backend server is available
ping -c 3 $netapp_server || ret=$?

if [ $ret != 0 ] ; then 
  echo "netapp server is unavailable!"
  exit 1
fi

# destroy the old admin VM if any and spawn a clean new admin VM afterwards
# /usr/local/sbin/freshadminvm
freshadminvm $admin $admin_os
sleep 100 # time for the admin VM to boot

# clone, fetch and update the automation repo
# /usr/local/sbin/update_automation
update_automation

# put variables needed during the build process into mkcloud.config file
env | grep -e networking -e libvirt -e cloud &gt; mkcloud.config

# copy scripts/ dir onto the admin node in /root/scripts
scp -r ~/github.com/$repo_owner/automation/scripts mkcloud.config root@$admin:

# copy scenario file onto the admin node in /root/scenario.yml
scp ~/github.com/$repo_owner/automation/scripts/scenarios/cloud$cloud_version/qa/$ssl_type/$scenario_file \
    root@$admin:scenario.yml

ret=0

ssh root@$admin "
export want_test_updates=1 ;
export cloud=$cloud ;
export hw_number=$hw_number ;
export sbd_ip=$sbd_ip ;
export UPDATEREPOS=$UPDATEREPOS ;
export UPDATEBEFOREINSTALL=$UPDATEBEFOREINSTALL ;
export TESTHEAD=$TESTHEAD ;
export cloudsource=$cloudsource ;
export nodenumber=$nodenumber ;
export hacloud=$hacloud ;
export clusterconfig=$clusterconfig ;
export want_node_aliases=controller=2,compute=2,ceph=3 ;
export want_node_roles=controller=2,compute=2,storage=3 ;
export want_ceph=1 ;
export networkingplugin=$networkingplugin ;
export networkingmode=$networkingmode ;
export cephvolumenumber=1 ;
export netapp_password=$netapp_password ;
export netapp_server=$netapp_server ;
export netapp_vserver=$netapp_vserver ;
export scenario=\"/root/scenario.yml\" ;
export commands=\"$commands\" "'

sed -i -e "s,##networkingplugin##,$networkingplugin," scenario.yml
sed -i -e "s,##networkingmode##,$networkingmode," scenario.yml
sed -i -e "s,##netapp_password##,$netapp_password," scenario.yml
sed -i -e "s,##netapp_server##,$netapp_server," scenario.yml
sed -i -e "s,##netapp_vserver##,$netapp_vserver," scenario.yml

[ $UPDATEBEFOREINSTALL == "true" ] &amp;&amp; export updatesteps="addupdaterepo runupdate"

timeout --signal=ALRM 240m bash -x -c "source scripts/qa_crowbarsetup.sh ; onadmin_runlist $commands"
' || ret=$?

echo "mkphyscloud ret=$ret (before scenario)"

if [ "$ret" = "0" ]; then
  # ----- Prepare the SBD setup:
  cat &gt; /tmp/sbd_prepare_$admin &lt;&lt;EOSCRIPT
    # preparaton of iSCSI
    export ZYPP_LOCK_TIMEOUT=120
    zypper --gpg-auto-import-keys -p http://download.opensuse.org/repositories/devel:/languages:/python/SLE_12_SP2/ --non-interactive install python-sh

    chmod +x scripts/iscsictl.py

    for node in {controller1,controller2} ; do
      ./scripts/iscsictl.py --service initiator --target_host $sbd_ip --host \$node --no-key --id id-qa$hw_number
    done

    # preparation of SBD
    SBD_DEV=\$(ssh controller1 echo '/dev/disk/by-id/scsi-\$(lsscsi -i | grep LIO | tr -s " " |cut -d " " -f7)')
    ssh controller1 "zypper --non-interactive install sbd; sbd -d \$SBD_DEV create -4 20 -1 10"
    ssh controller2 "zypper --non-interactive install sbd"
    # watchdog configuration
    ssh controller1 "modprobe softdog; echo softdog &gt; /etc/modules-load.d/watchdog.conf"
    ssh controller2 "modprobe softdog; echo softdog &gt; /etc/modules-load.d/watchdog.conf"
    # take scenario yaml file and replace /dev/sda with the right thing:
    sed -i "s|/dev/sda|\${SBD_DEV}|g" scenario.yml
    # ----- End of SBD
EOSCRIPT

  chmod +x /tmp/sbd_prepare_$admin
  scp /tmp/sbd_prepare_$admin root@$admin:sbd_prepare

  # Remove unused initiators from the iscsi target
  iscsi_target_cleanup qa$hw_number

  # Rerun chef-client to avoid frequent failures here and update bind records, see bsc#1021900
  ssh root@$admin 'chef-client'

  # Check if zypper is used by other application
  ssh root@$admin '
    source scripts/qa_crowbarsetup.sh;
    for node in $(crowbar machines aliases | grep "controller" | grep -oE "^.*[[:space:]]"); do
      wait_for 20 10 "ssh $node \"zypper refresh\"" "zypper to be available on $node"
    done
  '
fi

ssh root@$admin "
  export cloud=$cloud ;
  export TESTHEAD=$TESTHEAD ;
  export cloudsource=$cloudsource ;
  export nodenumber=$nodenumber ;
  export hacloud=$hacloud ;
  export clusterconfig=$clusterconfig ;
  export want_ceph=1 ;
  export cephvolumenumber=1;
  export scenario=scenario.yml "'
  echo "deployceph=1" &gt;&gt; mkcloud.config

  source scripts/qa_crowbarsetup.sh

  ./sbd_prepare

  crowbar batch --timeout 2400 build scenario.yml' || ret=$?

if [ $ret != 0 ] ; then
  ssh root@$admin '
  set -x
  for node in $(crowbar machines list | grep ^d) ; do
    (
    echo "Collecting supportconfig from $node"
    timeout 400 ssh $node supportconfig | wc
    timeout 300 scp $node:/var/log/\*tbz /var/log/
    )&amp;
  done
  timeout 500 supportconfig | wc &amp;
  wait
  '
fi &gt;&amp;2

scp root@$admin:/var/log/*tbz $artifacts_dir/
exit $ret
</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>hw_number=$hw_number
tempest=$tempest
cct_tests=$cct
scenario_name=2c
scenario_job_name=$JOB_NAME
scenario_build_number=$BUILD_NUMBER
</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>cloud-mkphyscloud-qa-tests-trigger</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@">
      <template>#${BUILD_NUMBER} ${ENV,var="cloudsource"} - qa${ENV,var="hw_number"} ${ENV,var="networkingplugin"}:${ENV,var="networkingmode"}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
