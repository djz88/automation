<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>This job runs https://github.com/SUSE-Cloud/automation/blob/master/scripts/mkcloud
Results are analyzed by https://github.com/SUSE-Cloud/automation/blob/master/scripts/jenkins/mkcloudresultcheck.pl on mkcloudresultcheck@mkcloudresultcheck.cloud.suse.de every 15 minutes
&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>30</daysToKeep>
    <numToKeep>200</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <permission>hudson.model.Item.Cancel:cloud</permission>
      <permission>hudson.model.Item.Delete:cloud</permission>
      <permission>hudson.model.Item.Read:cloud</permission>
      <permission>hudson.model.Item.Read:anonymous</permission>
      <permission>hudson.model.Run.Delete:cloud</permission>
      <permission>hudson.model.Item.Workspace:cloud</permission>
      <permission>hudson.model.Item.Build:cloud</permission>
      <permission>hudson.scm.SCM.Tag:cloud</permission>
      <permission>hudson.model.Item.Configure:cloud</permission>
      <permission>hudson.model.Item.Discover:cloud</permission>
      <permission>hudson.model.Run.Update:cloud</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>sample_build_num</name>
          <description>Number of a previous openstack-mkcloud build from which to emit the log as a fake job log, providing text to test the log parser rules against.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>github_pr</name>
          <description>String is a ':' separated list of these values: $ORG/$repo:$PR_ID:$SHA1:$BRANCH:$context
Note: SHA1 must be latest commit in PR, $context is optional (only use if multiple gating runs needed per PR)</description>
          <defaultValue>SUSE-Cloud/automation:PR_ID:SHA1:master</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>openstack-mkcloud</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set -x
shopt -s extglob
# emptying the workspace
mkdir -p empty
rsync -r --delete empty/ ./

export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

export automationrepo=~/github.com/SUSE-Cloud/automation

# automation bootstrapping
if ! [ -e ${automationrepo}/scripts/jenkins/update_automation ] ; then
  rm -rf ${automationrepo}
  curl https://raw.githubusercontent.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation | bash
fi
# fetch the latest automation updates
${automationrepo}/scripts/jenkins/update_automation #NO PARAMETERS HERE ANY MORE!!!

#function mkcloudgating_trap()
#{
#    $ghs -a set-status -s "failure" -r $github_pr_repo -t $BUILD_URL -c $github_pr_sha --context $ghs_context
#}

## mkcloud github PR gating
if [[ $github_pr ]] ; then
    github_opts=(${github_pr//:/ })
    github_pr_repo=${github_opts[0]}
    github_pr_id=${github_opts[1]}
    github_pr_sha=${github_opts[2]}
    github_pr_context=${github_opts[4]}
    ghs_context=suse/mkcloud
    if [[ $github_pr_context ]] ; then
      ghs_context=$ghs_context/$github_pr_context
    fi

    echo "testing PR: https://github.com/$github_pr_repo/pull/$github_pr_id"
    ghs=${automationrepo}/scripts/github-status/github-status.rb
    zypper -n install "rubygem(netrc)" "rubygem(octokit)"

    #if ! $ghs -r $github_pr_repo -a is-latest-sha -p $github_pr_id -c $github_pr_sha ; then
    #    $ghs -a set-status -s "error" -t $BUILD_URL -r $github_pr_repo -c $github_pr_sha -m "SHA1 mismatch, newer commit exists" --context $ghs_context
    #    exit 1
    #fi

    #trap "mkcloudgating_trap" ERR

    # Support for automation self-gating
    if [[ "$github_pr_repo" = "SUSE-Cloud/automation" ]]; then
        automationrepo_orig=$automationrepo
        pr_dir=`mktemp -d $WORKSPACE/SUSE-Cloud.automation.XXXXXX`
        automationrepo=$pr_dir/automation

        mkdir -p $automationrepo
        rsync -a ${automationrepo_orig%/}/ $automationrepo/
        pushd $automationrepo
        ghremote=origin
        git config --get-all remote.${ghremote}.fetch | grep -q pull || \
            git config --add remote.${ghremote}.fetch "+refs/pull/*/head:refs/remotes/${ghremote}/pr/*"
        git fetch $ghremote 2&gt;&amp;1 | grep -v '\[new ref\]'
        git checkout -t $ghremote/pr/$github_pr_id
        echo "we merge to always test what will end up in master"
        git merge master -m temp-merge-commit
        # show latest commit in log to see what's really tested
        git --no-pager show
        popd
    elif [[ "$github_pr_repo" = "SUSE-Cloud/cct" ]]; then
        export want_cct_pr=$github_pr_id
    fi

    #$ghs -a set-status -s "pending" -r $github_pr_repo -t $BUILD_URL -c $github_pr_sha --context $ghs_context -m "Started PR gating"

fi

cp ${automationrepo}/scripts/jenkins/log-parser/openstack-mkcloud-rules.txt log-parser-plugin-rules.txt

echo "########################################################################"
env
echo "########################################################################"

curl -s https://ci.suse.de/view/Cloud/view/Worker/job/openstack-mkcloud/${sample_build_num}/consoleText
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>false</failBuildOnError>
      <showGraphs>true</showGraphs>
      <useProjectRule>true</useProjectRule>
      <projectRulePath>log-parser-plugin-rules.txt</projectRulePath>
    </hudson.plugins.logparser.LogParserPublisher>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@">
      <template>#${BUILD_NUMBER}: ${ENV,var="job_name"}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.18">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>3600</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.AbortOperation/>
        <hudson.plugins.build__timeout.operations.WriteDescriptionOperation>
          <description>Job aborted due to 60 minutes of inactivity.</description>
        </hudson.plugins.build__timeout.operations.WriteDescriptionOperation>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
  </buildWrappers>
</project>
