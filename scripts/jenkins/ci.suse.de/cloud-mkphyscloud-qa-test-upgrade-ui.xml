<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>Run upgrade on the selected cloud&#13;
Useful only for cloud that was built by mkcloud.&#13;
This job is making use of mkcloud.config file stored on admin node which contains&#13;
configuration values used from the jenkins cloud scenario&#13;
&#13;
Mandatory parameter: hw_number&#13;
&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@">
      <gitLabConnection>https://gitlab.suse.de</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty plugin="gitlab-logo@">
      <repositoryName/>
    </org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>hw_number</name>
          <description>Mandatory, number of the QA cloud server</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>upgrade_cloudsource</name>
          <description>Mandatory, mkcloud cloudsource target name, e.g. develcloud7</description>
          <defaultValue>develcloud7</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_name</name>
          <description>Optional; scenario name which typically is an integer with a single letter</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cct_repo_owner</name>
          <description>Optional; scenario name which typically is an integer with a single letter</description>
          <defaultValue>SUSE-Cloud</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cct_git_url</name>
          <description>Optional, cct git repo url</description>
          <defaultValue>https://github.com/$cct_repo_owner/cct.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cct_checkout_branch</name>
          <description>Optional, pick git branch to be tested</description>
          <defaultValue>cloud6</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_job_name</name>
          <description>Optional; name of the scenario jenkins job that is used to trigger this job</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_build_number</name>
          <description>Optional; scenario build number that triggered this job</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_build_number</name>
          <description>Optional; scenario build number that triggered this job</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>cloud-mkphyscloud-gate-qa</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
admin=crowbar$hw_number;
cloud=qa$hw_number;
result=0

artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

ssh root@$admin '
  hostname -f
  source mkcloud.config;
  source scripts/qa_crowbarsetup.sh;

  export heat_stack_params="--parameters"
  heat_stack_params="$heat_stack_params east_net_cidr=44.0.1.0/27;east_net_pool_start=44.0.1.10;east_net_pool_end=44.0.1.20"
  heat_stack_params="$heat_stack_params;west_net_cidr=44.0.2.0/27;west_net_pool_start=44.0.2.10;west_net_pool_end=44.0.2.20"
  echo "heat_stack_params=\"$heat_stack_params\"" &gt;&gt; mkcloud.config
  echo "Going to create heat stack with these params: $heat_stack_params"
  onadmin_testpreupgrade
' || result=$?

if [[ $result != 0 ]]; then
    exit $result
fi

fips=`ssh root@$admin '
  source mkcloud.config;
  source scripts/qa_crowbarsetup.sh;
  get_novacontroller
  oncontroller get_fips
'`

if [[ -z $fips ]]; then
  echo "No floating IPs found"
  exit 1
fi

ping_instances start "$fips"

ps aux | grep ping

ssh root@$admin "
  export cloud=$cloud;
  export upgrade_cloudsource=$upgrade_cloudsource
  export cct_ui_tests=true
  export cct_git_url=$cct_git_url
  export cct_checkout_branch=$cct_checkout_branch
" '
  set -x;
  hostname -f;
  source mkcloud.config;
  source scripts/qa_crowbarsetup.sh;

  [[ -z $upgrade_cloudsource ]] &amp;&amp; \
  complain 55 "Variable \$upgrade_cloudsource not defined, upgrade target is missing"

  zypper refresh
  zypper update
  zypper --non-interactive install crowbar-ui

  # from scripts/mkcloud -&gt; crowbarupgrade_5plus
  onadmin_zypper_patch_all
  onadmin_allow_vendor_change_at_nodes

  original_cloudsource=$cloudsource

  if crowbarctl proposal show ceph default ; then
    export deployceph=1
    export adminip=`hostname -f`
    grep adminip mkcloud.config || echo "adminip=$adminip" &gt;&gt; mkcloud.config
    export cloudsource=$upgrade_cloudsource
    onadmin_prepare_cloudupgrade_nodes_repos_6_to_7
    onadmin_upgrade_ses_to_4
  fi

  export cloudsource=$original_cloudsource
  export cct_tests=feature:ui:upgrade:landing
  onadmin_run_cct || exit 1

  export cct_tests=feature:ui:upgrade:admin:backup
  onadmin_run_cct || exit 1

  export cloudsource=$upgrade_cloudsource
  onadmin_prepare_cloudupgrade_admin_repos_6_to_7

  export cct_tests=feature:ui:upgrade:admin:repos
  onadmin_run_cct || exit 1

  # We only check if the upgrade screen is ready but we will do the upgrade via crowbarctl later
  export cct_tests=feature:ui:upgrade:admin:upgrade
  onadmin_run_cct

' || result=$?

scp root@$admin:/root/github.com/$cct_repo_owner/cct/*.png $artifacts_dir

if [[ $result != 0 ]]; then
    exit $result
fi

# Clean up deps installed for cct UI tests
# and remove SDK-SP1 SDK-SP1-Update repos
# /usr/local/sbin/cct_deps_cleanup
cct_deps_cleanup $admin

# remove cloud6 ptf repo in case it exists
ssh root@$admin "zypper rr cloud-ptf"

# Trigger the SLE upgrade from crowbarctl
# The cct process runs on the admin node we can't use it here reliably
# We plug it back once the admin node is upgraded and ready to use
ssh root@$admin "
  export cloud=$cloud;
  export cloudsource=$upgrade_cloudsource
" '
  set -x;
  hostname -f;
  source mkcloud.config;
  source scripts/qa_crowbarsetup.sh;
  export cloudsource=$upgrade_cloudsource

  # Do the upgrade of the admin node
  onadmin_upgrade_admin_server
' || result=$?

if [[ $result != 0 ]]; then
    exit $result
fi

wait_for 400 3 "! nc -w 1 -z $admin 22" "crowbar to go down after upgrade"
wait_for 150 1 "nc -w 1 -z $admin 22" "admin node to start ssh daemon"

ssh root@$admin "
  export cloud=$cloud;
  export cloudsource=$upgrade_cloudsource
  export upgrade_cloudsource=$upgrade_cloudsource
  export cct_checkout_branch=$cct_checkout_branch
  export cct_ui_tests=true
" '
  set -x;
  hostname -f;
  source mkcloud.config;
  source scripts/qa_crowbarsetup.sh;
  export cloudsource=$upgrade_cloudsource

  onadmin_check_admin_server_upgraded

  export cct_tests=feature:ui:upgrade:pgsql:create
  onadmin_run_cct

  onadmin_prepare_cloudupgrade_nodes_repos_6_to_7
  '
  
  exit 0
  
  ssh root@$admin "
  export cloud=$cloud;
  export cloudsource=$upgrade_cloudsource
  export upgrade_cloudsource=$upgrade_cloudsource
  export cct_checkout_branch=$cct_checkout_branch
  export cct_ui_tests=true
" '

  export cct_tests=feature:ui:upgrade:nodes:repos
  onadmin_run_cct

  export cct_tests=feature:ui:upgrade:os-services:stop
  onadmin_run_cct

  export cct_tests=feature:ui:upgrade:os-db:backup
  onadmin_run_cct

  export cct_tests=feature:ui:upgrade:nodes:upgrade
  onadmin_run_cct

'
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@">
      <template>#${BUILD_NUMBER} - ${scenario_name} - qa$hw_number - upgrade-ui</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
