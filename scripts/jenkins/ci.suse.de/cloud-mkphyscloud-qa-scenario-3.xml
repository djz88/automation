<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>&lt;b&gt;This job is managed by JJB! Changes must be done in
&lt;a href='https://github.com/SUSE-Cloud/automation/tree/master/jenkins/ci.suse.de/'&gt;git&lt;/a&gt;
&lt;/b&gt;

Scenario details:
   - 6 nodes
   - HA with IPMI (3 controllers)
   - 1 kvm compute node cluster of 3 nodes

It will wipe all machines in the selected cloud!
&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>false</concurrentBuild>
  <assignedNode>cloud-mkphyscloud-gate-qa</assignedNode>
  <canRoam>false</canRoam>
  <logRotator>
    <daysToKeep>-1</daysToKeep>
    <numToKeep>15</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>hw_number</name>
          <description>Mandatory, name of the QA cloud server as integer</description>
          <defaultValue>2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>admin_os</name>
          <description>Mandatory, admin node operating system version</description>
          <defaultValue>sles12sp2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>shared_storage_ip</name>
          <description>Mandatory, shared storage server IP</description>
          <defaultValue>10.162.66.1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo_owner</name>
          <description>Mandatory, automation repo owner/organization</description>
          <defaultValue>SUSE-Cloud</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>automation_repo</name>
          <description>Mandatory, automation repo URL</description>
          <defaultValue>git://github.com/$repo_owner/automation.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>Mandatory, automation repo branch</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tempest</name>
          <description>Optional, specify what tempest test(s) to run, e.g. smoke, smoke|full or smoke|defcore</description>
          <defaultValue>smoke</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cct</name>
          <description>Optional, specify cct tests to run</description>
          <defaultValue>features:base</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ssl_type</name>
          <description>Mandatory, set the SSL configuration for the cloud, available options: no-ssl, ssl-insecure, ssl</description>
          <defaultValue>no-ssl</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cloud_version</name>
          <description>Mandatory, version of the cloud to be installed as integer</description>
          <defaultValue>7</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_file</name>
          <description>Scenario yaml file name</description>
          <defaultValue>qa-scenario-3.yaml</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cloudsource</name>
          <description/>
          <defaultValue>develcloud$cloud_version</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TESTHEAD</name>
          <description>if non-empty, test latest version from Devel:Cloud Stagin</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hacloud</name>
          <description>By default we do not want HA configured and installed</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>clusterconfig</name>
          <description>HA configuration for clusters. Make sense only if hacloud=1</description>
          <defaultValue>services=3</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nodenumber</name>
          <description>Number of nodes to use; is scenario specific</description>
          <defaultValue>6</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_ipmi</name>
          <description/>
          <defaultValue>true</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>commands</name>
          <description>All the steps that needs to be completed to have cloud installed</description>
          <defaultValue>addupdaterepo prepareinstallcrowbar runupdate bootstrapcrowbar installcrowbar allocate waitcloud setup_aliases batch</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>UPDATEREPOS</name>
          <description>Update repositories (one URL per line)</description>
          <defaultValue/>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UPDATEBEFOREINSTALL</name>
          <description>add update repos before crowbar install</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUNNOVAEVACUATE</name>
          <description>Will execute nova evacuate test after deployment</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
export admin=crowbar$hw_number;
export cloud=qa$hw_number;

if [ ! -z "$UPDATEREPOS" ] ; then
  export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
fi

export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

# destroy the old admin VM if any and spawn a clean new admin VM afterwards
# /usr/local/sbin/freshadminvm
freshadminvm $admin $admin_os
sleep 100 # time for the admin VM to boot

# wipe out shared NFS that are being used by this deployment:
# /usr/local/sbin/wipe_nfs_shares
ssh root@localhost "wipe_nfs_shares qa$hw_number"

# clone, fetch and update the automation repo
# /usr/local/sbin/update_automation
update_automation

# put variables needed during the build process into mkcloud.config file
env | grep -e networking -e libvirt -e cloud &gt; mkcloud.config

# copy scripts/ dir onto the admin node in /root/scripts
scp -r ~/github.com/$repo_owner/automation/scripts mkcloud.config root@$admin:

# copy scenario file onto the admin node in /root/scenario.yml
scp ~/github.com/$repo_owner/automation/scripts/scenarios/cloud$cloud_version/qa/$ssl_type/$scenario_file \
    root@$admin:scenario.yml

ret=0

ssh root@$admin "
export cloud=$cloud
export hw_number=$hw_number
export UPDATEREPOS=$UPDATEREPOS
export UPDATEBEFOREINSTALL=$UPDATEBEFOREINSTALL
export TESTHEAD=$TESTHEAD
export cloudsource=$cloudsource
export nodenumber=$nodenumber
export hacloud=$hacloud
export clusterconfig=$clusterconfig
export shared_storage_ip=$shared_storage_ip
export want_node_aliases=controller=3,compute=3
export scenario=\"/root/scenario.yml\"
export commands=\"$commands\" "'

sed -i -e "s,##shared_nfs_for_glance##,$shared_storage_ip," scenario.yml
sed -i -e "s,##shared_nfs_export_for_glance##,/var/$cloud/ha-glance/," scenario.yml
sed -i -e "s,##shared_nfs_for_database##,$shared_storage_ip:/var/$cloud/ha-database," scenario.yml
sed -i -e "s,##shared_nfs_for_rabbitmq##,$shared_storage_ip:/var/$cloud/ha-rabbitmq," scenario.yml

[ $UPDATEBEFOREINSTALL == "true" ] &amp;&amp; export updatesteps="addupdaterepo runupdate"

timeout --signal=ALRM 150m bash -x -c ". scripts/qa_crowbarsetup.sh ; onadmin_runlist $commands;"
' || ret=$?

# Some initial preparations:
#  * copy the certificate from controller1 to
#    all compute nodes
#  * calculate the number of compute nodes

if [[ $RUNNOVAEVACUATE = true &amp;&amp; $ret = 0 ]]; then
  echo "Start nova evacuate testing"
  ssh -T root@$admin &lt;&lt; 'EOF'
  PJSON="import json,sys; field = json.load(sys.stdin)"

  # Extract the list of controll nodes, that will be copied to the
  # admin node. Used in oncontroller_nova_evacuate in
  # qa_crowbarsetup.sh
  controller_nodes=$(crowbarctl proposal show --filter deployment.pacemaker.elements.pacemaker-cluster-member --json pacemaker services)
  num_controllers=$(echo $controller_nodes | python -c "$PJSON; print len(field)")
  # Recover the controller1 certificate
  scp controller1:/root/.ssh/id_rsa.pub /tmp/

  # Extract the list of compute nodes, that will be copied to the
  # admin node.
  compute_nodes=$(crowbarctl proposal show --filter deployment.pacemaker.elements.pacemaker-remote --json pacemaker services)
  num_computes=$(echo $compute_nodes | python -c "$PJSON; print len(field)")

  # Deploy the certificate to all compute nodes
  for ((i=1; i&lt;=$num_computes; i++)); do
    echo "Copy auth keys from $HOSTNAME to compute$i"
    ssh-copy-id -f -i /tmp/id_rsa.pub compute$i
  done

  # Run test oncontroller_nova_evacuate
  source scripts/qa_crowbarsetup.sh
  get_novacontroller
  oncontroller nova_evacuate $num_controllers
EOF
  ret=$?
fi

if [ $ret != 0 ] ; then
  ssh $sshopts root@$admin '
  set -x
  for node in $(crowbar machines list | grep ^d) ; do
    (
    echo "Collecting supportconfig from $node"
    timeout 400 ssh $node supportconfig | wc
    timeout 300 scp $node:/var/log/\*tbz /var/log/
    )&amp;
  done
  timeout 500 supportconfig | wc &amp;
  wait
  '

  scp root@$admin:/var/log/*tbz $artifacts_dir/
fi &gt;&amp;2

exit $ret
</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder>
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>hw_number=$hw_number
tempest=$tempest
cct_tests=$cct
scenario_name=3
scenario_job_name=$JOB_NAME
scenario_build_number=$BUILD_NUMBER
</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>cloud-mkphyscloud-qa-tests-trigger</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>true</allowEmptyArchive>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
      <template>#${BUILD_NUMBER}: ${ENV,var="cloudsource"}</template>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
    <hudson.plugins.timestamper.TimestamperBuildWrapper/>
  </buildWrappers>
</project>
